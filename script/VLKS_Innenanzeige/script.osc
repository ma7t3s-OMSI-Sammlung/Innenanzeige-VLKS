{macro:VLKS_Innenanzeige_init}
    1 (S.L.VLKS_Innenanzeige_Daueranimation)
{end}

{macro:VLKS_Innenanzeige_frame}
' Prüfen, ob Stromversorgung besteht
    (L.L.VLKS_Innenanzeige_Power) !
    {if}
' Wenn nein, ausschalten (Boot = 0)
        0 (S.L.VLKS_Innenanzeige_Boot)
    {else}
' Wenn noch ausgeschalet, Bootvorgang starten
        (L.L.VLKS_Innenanzeige_Boot) 0 =
        {if}
            1 (S.L.VLKS_Innenanzeige_Boot)
        {endif}
    {endif}

    (M.L.VLKS_Innenanzeige_ports)

' Handler, der die richtige Freetex und vis-Variablen setzt 
    (M.L.VLKS_Innenanzeige_updateScreen)
{end}

{macro:VLKS_Innenanzeige_updateScreen}
' Wenn ausgeschaltet, setze schwarze Textur und deaktiviere alle Textfelder
' Außerdem Boot-Timer zurücksetzen
    (L.L.VLKS_Innenanzeige_Boot) 0 =
    {if}
        "VLKS_Innenanzeige\Screen_schwarz.dds" (S.$.VLKS_Innenanzeige_Freetex)
        0 (S.L.VLKS_Innenanzeige_visT) (S.L.VLKS_Innenanzeige_BootTimer)
    {else}
' Wenn aktuell hochgefahren wird (Boot = 1), führe den Boot-Handler aus
        (L.L.VLKS_Innenanzeige_Boot) 1 =
        {if}
            (M.L.VLKS_Innenanzeige_Boot)
        {else}

            (L.L.VLKS_Innenanzeige_StopTimer) (L.S.Timegap) + 2 % (S.L.VLKS_Innenanzeige_StopTimer)

            1 (S.L.VLKS_Innenanzeige_visT)

' TODO: Verspätung/Abfahrtszeit nur anzeigen, wenn man im Drucker auch eingeloggt ist!

            (L.L.schedule_active)
            (C.L.VLKS_Innenanzeige_Config_EnableDelay) &&
            {if}
                (M.V.GetTTDelay) 60 / s0
                -1 <=
                {if}
                    (M.V.GetTTBusstopIndex) 0 =
                    {if}
                        "VLKS_Innenanzeige\Screen_Abfahrt"
                    {else}
                        "VLKS_Innenanzeige\Screen_Verfruehung"
                    {endif}
                {else}
                    l0 5 >=
                    {if}
                        "VLKS_Innenanzeige\Screen_Verspaetung_Rot"
                    {else}
                        "VLKS_Innenanzeige\Screen_Verspaetung_Blau"
                    {endif}
                {endif}
				l0 abs trunc $IntToStr (S.$.VLKS_Innenanzeige_Delay)
            {else}
                "VLKS_Innenanzeige\Screen_Blanko"
            {endif}

            (L.L.VLKS_Innenanzeige_Stop)
            (L.L.VLKS_Innenanzeige_StopTimer) 1 < &&
            {if}
                "_W" $+
            {endif}
            ".dds" $+ (S.$.VLKS_Innenanzeige_Freetex)

            (L.L.VLKS_Innenanzeige_Stop) 1 + (S.L.VLKS_Innenanzeige_StopVis)
        {endif}
    {endif}
{end}

' Boot-Handler
{macro:VLKS_Innenanzeige_Boot}
    (L.L.VLKS_Innenanzeige_BootTimer) (L.S.Timegap) + (S.L.VLKS_Innenanzeige_BootTimer) s0

    l0 1 <
    {if}
        "VLKS_Innenanzeige\Screen_schwarz.dds"
    {else}
        l0 5 <
        {if}
            "VLKS_Innenanzeige\Screen_Boot_1.dds"
        {else}
            l0 10 <
            {if}
                "VLKS_Innenanzeige\Screen_Boot_2.dds"
            {else}
                l0 15 <
                {if}
                    "VLKS_Innenanzeige\Screen_Boot_4.dds"
                {else}
                    2 (S.L.VLKS_Innenanzeige_Boot)
                {endif}
            {endif}
        {endif}
    {endif}
    (S.$.VLKS_Innenanzeige_Freetex)
{end}

'Dieses Makro dient zum übergeben von Daten an die Anzeige
{macro:VLKS_Innenanzeige_ports}
' Stromversorgung
    (L.L.elec_busbar_main) (S.L.VLKS_Innenanzeige_Power)

' Liniennumer
    (L.$.nuntius_api_lineStr) (S.$.VLKS_Innenanzeige_Line)

' Terminus
    (L.$.nuntius_api_terminusStr) (S.$.VLKS_Innenanzeige_Terminus)

' Haltestellenfolge
    (L.$.nuntius_api_busstop0) (S.$.VLKS_Innenanzeige_NextBusstop) (S.$.VLKS_Innenanzeige_NextBusstopBig)
    (L.$.nuntius_api_busstop1) (S.$.VLKS_Innenanzeige_FollowingBusstop1)
    (L.$.nuntius_api_busstop2) (S.$.VLKS_Innenanzeige_FollowingBusstop2)
    (L.$.nuntius_api_busstop3) (S.$.VLKS_Innenanzeige_FollowingBusstop3)

' Haltewunsch
    (L.L.haltewunsch_Signal) (S.L.VLKS_Innenanzeige_Stop)
{end}
